/*
 * API Identity Data
 * <p>Identity Data API es un facilitador de funcionalidades que engloba información de distintas fuentes de acceso públicas y privadas en el progreso del producto para realizar la validación de identidad del Cliente. El objetivo es que a través de una sola API, el usuario puede acceder, corroborar y validar la identidad de la persona haciendo la solicitud de un producto o servicio.</p><br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.identityData.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;
import java.util.UUID;
/**
 * La estructura de request es unica para cualquier tipo de validación, a continuación se indica casos soportados para cada validación especifica, y en que  solicitud de validacion son tomados en cuenta. &lt;h4&gt;Validacion meditante SEP&lt;/h4&gt; Se puede enviar cualquiera de las siguientes combinaciones 1.- Cedula 3.- Cedula mas nombre completo &lt;h4&gt;Validacion meditante RENAPO&lt;/h4&gt; 1.- Para realizar consultas por CURP únicamente se debe incluir el campo “curp”  2.- En caso de querer realizar consulta de CURP por datos, se deben incluir los campos “nombre”, ”apellidoPaterno”, ”apellidoMaterno”, “sexo”, “fechaNacimiento” y “entidadNacimiento” &lt;h4&gt;Validacion meditante INE&lt;/h4&gt; &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;td&gt;Atributo&lt;/td&gt;&lt;td&gt;Uso&lt;/td&gt;&lt;td&gt;Tipo&lt;/td&gt;&lt;td&gt;Descripcion&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;cic&lt;/td&gt;&lt;td&gt;Obligatorio si es tipo D, E o F &lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Número CIC de la credencial de elector &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;orc&lt;/td&gt;&lt;td&gt;Obligatorio si es IFE &lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Número OCR de la credencial de elector &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;claveElector&lt;/td&gt;&lt;td&gt;Obligatorio si es tipo A, B o C &lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Clave de elector &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;numeroEmision&lt;/td&gt;&lt;td&gt;Obligatorio si es tipo A, B o C &lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Número de emisión de la credencial de elector &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;identificadorCiudadano&lt;/td&gt;&lt;td&gt;Obligatorio si es INE &lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;&lt;Número de identificador ciudadano /td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;referencia&lt;/td&gt;&lt;td&gt;Obligatorio&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Número de referencia hecho aleatoriamente &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;institucion&lt;/td&gt;&lt;td&gt;Obligatorio&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Institución que envía la solicitud &lt;/td&gt;Fecha cuando se hace la solicitud &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;fecha&lt;/td&gt;&lt;td&gt;&lt;/td&gt;Obligatorio&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
 */
@Schema(description = "La estructura de request es unica para cualquier tipo de validación, a continuación se indica casos soportados para cada validación especifica, y en que  solicitud de validacion son tomados en cuenta. <h4>Validacion meditante SEP</h4> Se puede enviar cualquiera de las siguientes combinaciones 1.- Cedula 3.- Cedula mas nombre completo <h4>Validacion meditante RENAPO</h4> 1.- Para realizar consultas por CURP únicamente se debe incluir el campo “curp”  2.- En caso de querer realizar consulta de CURP por datos, se deben incluir los campos “nombre”, ”apellidoPaterno”, ”apellidoMaterno”, “sexo”, “fechaNacimiento” y “entidadNacimiento” <h4>Validacion meditante INE</h4> <table> <thead><tr><td>Atributo</td><td>Uso</td><td>Tipo</td><td>Descripcion</td></tr></thead> <tr><td>cic</td><td>Obligatorio si es tipo D, E o F </td><td>String</td><td>Número CIC de la credencial de elector </td></tr> <tr><td>orc</td><td>Obligatorio si es IFE </td><td>String</td><td>Número OCR de la credencial de elector </td></tr> <tr><td>claveElector</td><td>Obligatorio si es tipo A, B o C </td><td>String</td><td>Clave de elector </td></tr> <tr><td>numeroEmision</td><td>Obligatorio si es tipo A, B o C </td><td>String</td><td>Número de emisión de la credencial de elector </td></tr> <tr><td>identificadorCiudadano</td><td>Obligatorio si es INE </td><td>String</td><td><Número de identificador ciudadano /td></tr> <tr><td>referencia</td><td>Obligatorio</td><td></td><td>Número de referencia hecho aleatoriamente </td></tr> <tr><td>institucion</td><td>Obligatorio</td><td></td><td>Institución que envía la solicitud </td>Fecha cuando se hace la solicitud </tr> <tr><td>fecha</td><td></td>Obligatorio<td></td><td></td></tr> </table> ")

public class Request {
  /**
   * Entidad sobre la cual se ejecutara la validación. Debe ser una del enum
   */
  @JsonAdapter(InfoProviderEnum.Adapter.class)
  public enum InfoProviderEnum {
    @SerializedName("RENAPO")
    RENAPO("RENAPO"),
    @SerializedName("INE")
    INE("INE"),
    @SerializedName("SEP")
    SEP("SEP"),
    @SerializedName("DEBUG")
    DEBUG("DEBUG");

    private String value;

    InfoProviderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InfoProviderEnum fromValue(String input) {
      for (InfoProviderEnum b : InfoProviderEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InfoProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InfoProviderEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public InfoProviderEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return InfoProviderEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("infoProvider")
  private InfoProviderEnum infoProvider = null;

  @SerializedName("nombres")
  private String nombres = null;

  @SerializedName("apellidoPaterno")
  private String apellidoPaterno = null;

  @SerializedName("apellidoMaterno")
  private String apellidoMaterno = null;

  @SerializedName("fechaNacimiento")
  private String fechaNacimiento = null;

  @SerializedName("curp")
  private String curp = null;

  @SerializedName("sexo")
  private String sexo = null;

  @SerializedName("entidadNacimiento")
  private String entidadNacimiento = null;

  @SerializedName("numeroCedula")
  private String numeroCedula = null;

  @SerializedName("cic")
  private String cic = null;

  @SerializedName("ocr")
  private String ocr = null;

  @SerializedName("claveElector")
  private String claveElector = null;

  @SerializedName("numeroEmision")
  private String numeroEmision = null;

  @SerializedName("identificadorCiudadano")
  private String identificadorCiudadano = null;

  @SerializedName("referencia")
  private String referencia = null;

  @SerializedName("institucion")
  private String institucion = null;

  @SerializedName("fecha")
  private String fecha = null;

  @SerializedName("requestId")
  private String requestId = null;

  public Request infoProvider(InfoProviderEnum infoProvider) {
    this.infoProvider = infoProvider;
    return this;
  }

   /**
   * Entidad sobre la cual se ejecutara la validación. Debe ser una del enum
   * @return infoProvider
  **/
  @Schema(required = true, description = "Entidad sobre la cual se ejecutara la validación. Debe ser una del enum")
  public InfoProviderEnum getInfoProvider() {
    return infoProvider;
  }

  public void setInfoProvider(InfoProviderEnum infoProvider) {
    this.infoProvider = infoProvider;
  }

  public Request nombres(String nombres) {
    this.nombres = nombres;
    return this;
  }

   /**
   * Nombres de la persona en mayusculas
   * @return nombres
  **/
  @Schema(example = "ABIGAIL", description = "Nombres de la persona en mayusculas")
  public String getNombres() {
    return nombres;
  }

  public void setNombres(String nombres) {
    this.nombres = nombres;
  }

  public Request apellidoPaterno(String apellidoPaterno) {
    this.apellidoPaterno = apellidoPaterno;
    return this;
  }

   /**
   * Apellido paterno de la persona en mayusculas
   * @return apellidoPaterno
  **/
  @Schema(example = "PEREZ", description = "Apellido paterno de la persona en mayusculas")
  public String getApellidoPaterno() {
    return apellidoPaterno;
  }

  public void setApellidoPaterno(String apellidoPaterno) {
    this.apellidoPaterno = apellidoPaterno;
  }

  public Request apellidoMaterno(String apellidoMaterno) {
    this.apellidoMaterno = apellidoMaterno;
    return this;
  }

   /**
   * Apellido materno de la persona en mayusculas
   * @return apellidoMaterno
  **/
  @Schema(example = "LOPEZ", description = "Apellido materno de la persona en mayusculas")
  public String getApellidoMaterno() {
    return apellidoMaterno;
  }

  public void setApellidoMaterno(String apellidoMaterno) {
    this.apellidoMaterno = apellidoMaterno;
  }

  public Request fechaNacimiento(String fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
    return this;
  }

   /**
   * DD/MM/AAAA. Ejemplo: 02/08/1990 (2 de agosto de 1990)
   * @return fechaNacimiento
  **/
  @Schema(example = "02/08/1990", description = "DD/MM/AAAA. Ejemplo: 02/08/1990 (2 de agosto de 1990)")
  public String getFechaNacimiento() {
    return fechaNacimiento;
  }

  public void setFechaNacimiento(String fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
  }

  public Request curp(String curp) {
    this.curp = curp;
    return this;
  }

   /**
   * CURP (loan/credit applicant MX Id).
   * @return curp
  **/
  @Schema(example = "BADD110313HCMLNS09", description = "CURP (loan/credit applicant MX Id).")
  public String getCurp() {
    return curp;
  }

  public void setCurp(String curp) {
    this.curp = curp;
  }

  public Request sexo(String sexo) {
    this.sexo = sexo;
    return this;
  }

   /**
   * “H” para hombre “M” para mujer
   * @return sexo
  **/
  @Schema(example = "H", description = "“H” para hombre “M” para mujer")
  public String getSexo() {
    return sexo;
  }

  public void setSexo(String sexo) {
    this.sexo = sexo;
  }

  public Request entidadNacimiento(String entidadNacimiento) {
    this.entidadNacimiento = entidadNacimiento;
    return this;
  }

   /**
   * Utilizar el código correspondiente al estado de nacimiento (Catálogo de entidades federativas) State (Estado)&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Identifier&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;AS&lt;/td&gt;&lt;td&gt;AGUASCALIENTES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BC&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA NORTE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BS&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA SUR&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CC&lt;/td&gt;&lt;td&gt;CAMPECHE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MC&lt;/td&gt;&lt;td&gt;CIUDAD DE MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CS&lt;/td&gt;&lt;td&gt;CHIAPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CH&lt;/td&gt;&lt;td&gt;CHIHUAHUA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CL&lt;/td&gt;&lt;td&gt;COHAHUILA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CM&lt;/td&gt;&lt;td&gt;COLIMA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DF&lt;/td&gt;&lt;td&gt;DISTRITO FEDERAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DG&lt;/td&gt;&lt;td&gt;DURANGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GT&lt;/td&gt;&lt;td&gt;GUANAJUATO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GR&lt;/td&gt;&lt;td&gt;GUERRERO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HG&lt;/td&gt;&lt;td&gt;HIDALGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JC&lt;/td&gt;&lt;td&gt;JALISCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MC&lt;/td&gt;&lt;td&gt;MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MN&lt;/td&gt;&lt;td&gt;MICHOCÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MS&lt;/td&gt;&lt;td&gt;MORELOS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NT&lt;/td&gt;&lt;td&gt;NAYARIT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NL&lt;/td&gt;&lt;td&gt;NUEVO LEÓN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OC&lt;/td&gt;&lt;td&gt;OXACA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PL&lt;/td&gt;&lt;td&gt;PUEBLA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QT&lt;/td&gt;&lt;td&gt;QUERÉTARO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QR&lt;/td&gt;&lt;td&gt;QUINTANA ROO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SP&lt;/td&gt;&lt;td&gt;SAN LUIS POTOSÍ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SL&lt;/td&gt;&lt;td&gt;SINALOA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SR&lt;/td&gt;&lt;td&gt;SONORA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TC&lt;/td&gt;&lt;td&gt;TABASCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TS&lt;/td&gt;&lt;td&gt;TAMAULIPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TL&lt;/td&gt;&lt;td&gt;TLAXCALA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VZ&lt;/td&gt;&lt;td&gt;VERACRUZ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YN&lt;/td&gt;&lt;td&gt;YUCATÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZS&lt;/td&gt;&lt;td&gt;ZACATECAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NE&lt;/td&gt;&lt;td&gt;NACIDO EN EL EXTRANJERO&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
   * @return entidadNacimiento
  **/
  @Schema(example = "JC", description = "Utilizar el código correspondiente al estado de nacimiento (Catálogo de entidades federativas) State (Estado)<table><thead><tr><th>Identifier</th><th>Name</th></tr></thead><tbody><tr><td>AS</td><td>AGUASCALIENTES</td></tr><tr><td>BC</td><td>BAJA CALIFORNIA NORTE</td></tr><tr><td>BS</td><td>BAJA CALIFORNIA SUR</td></tr><tr><td>CC</td><td>CAMPECHE</td></tr><tr><td>MC</td><td>CIUDAD DE MÉXICO</td></tr><tr><td>CS</td><td>CHIAPAS</td></tr><tr><td>CH</td><td>CHIHUAHUA</td></tr><tr><td>CL</td><td>COHAHUILA</td></tr><tr><td>CM</td><td>COLIMA</td></tr><tr><td>DF</td><td>DISTRITO FEDERAL</td></tr><tr><td>DG</td><td>DURANGO</td></tr><tr><td>GT</td><td>GUANAJUATO</td></tr><tr><td>GR</td><td>GUERRERO</td></tr><tr><td>HG</td><td>HIDALGO</td></tr><tr><td>JC</td><td>JALISCO</td></tr><tr><td>MC</td><td>MÉXICO</td></tr><tr><td>MN</td><td>MICHOCÁN</td></tr><tr><td>MS</td><td>MORELOS</td></tr><tr><td>NT</td><td>NAYARIT</td></tr><tr><td>NL</td><td>NUEVO LEÓN</td></tr><tr><td>OC</td><td>OXACA</td></tr><tr><td>PL</td><td>PUEBLA</td></tr><tr><td>QT</td><td>QUERÉTARO</td></tr><tr><td>QR</td><td>QUINTANA ROO</td></tr><tr><td>SP</td><td>SAN LUIS POTOSÍ</td></tr><tr><td>SL</td><td>SINALOA</td></tr><tr><td>SR</td><td>SONORA</td></tr><tr><td>TC</td><td>TABASCO</td></tr><tr><td>TS</td><td>TAMAULIPAS</td></tr><tr><td>TL</td><td>TLAXCALA</td></tr><tr><td>VZ</td><td>VERACRUZ</td></tr><tr><td>YN</td><td>YUCATÁN</td></tr><tr><td>ZS</td><td>ZACATECAS</td></tr><tr><td>NE</td><td>NACIDO EN EL EXTRANJERO</td></tr></tbody></table>")
  public String getEntidadNacimiento() {
    return entidadNacimiento;
  }

  public void setEntidadNacimiento(String entidadNacimiento) {
    this.entidadNacimiento = entidadNacimiento;
  }

  public Request numeroCedula(String numeroCedula) {
    this.numeroCedula = numeroCedula;
    return this;
  }

   /**
   * 7 u 8 dígitos del número de cédula profesional de la SEP
   * @return numeroCedula
  **/
  @Schema(example = "XXXXXXXX", description = "7 u 8 dígitos del número de cédula profesional de la SEP")
  public String getNumeroCedula() {
    return numeroCedula;
  }

  public void setNumeroCedula(String numeroCedula) {
    this.numeroCedula = numeroCedula;
  }

  public Request cic(String cic) {
    this.cic = cic;
    return this;
  }

   /**
   * Número CIC de la credencial de elector
   * @return cic
  **/
  @Schema(example = "123456789", description = "Número CIC de la credencial de elector")
  public String getCic() {
    return cic;
  }

  public void setCic(String cic) {
    this.cic = cic;
  }

  public Request ocr(String ocr) {
    this.ocr = ocr;
    return this;
  }

   /**
   * Número OCR de la credencial de elector
   * @return ocr
  **/
  @Schema(example = "123456789", description = "Número OCR de la credencial de elector")
  public String getOcr() {
    return ocr;
  }

  public void setOcr(String ocr) {
    this.ocr = ocr;
  }

  public Request claveElector(String claveElector) {
    this.claveElector = claveElector;
    return this;
  }

   /**
   * Clave de elector
   * @return claveElector
  **/
  @Schema(example = "123456789", description = "Clave de elector")
  public String getClaveElector() {
    return claveElector;
  }

  public void setClaveElector(String claveElector) {
    this.claveElector = claveElector;
  }

  public Request numeroEmision(String numeroEmision) {
    this.numeroEmision = numeroEmision;
    return this;
  }

   /**
   * Número de emisión de la credencial de elector
   * @return numeroEmision
  **/
  @Schema(example = "123456789", description = "Número de emisión de la credencial de elector")
  public String getNumeroEmision() {
    return numeroEmision;
  }

  public void setNumeroEmision(String numeroEmision) {
    this.numeroEmision = numeroEmision;
  }

  public Request identificadorCiudadano(String identificadorCiudadano) {
    this.identificadorCiudadano = identificadorCiudadano;
    return this;
  }

   /**
   * Número de identificador ciudadano
   * @return identificadorCiudadano
  **/
  @Schema(example = "987654321", description = "Número de identificador ciudadano")
  public String getIdentificadorCiudadano() {
    return identificadorCiudadano;
  }

  public void setIdentificadorCiudadano(String identificadorCiudadano) {
    this.identificadorCiudadano = identificadorCiudadano;
  }

  public Request referencia(String referencia) {
    this.referencia = referencia;
    return this;
  }

   /**
   * Número de referencia hecho aleatoriamente
   * @return referencia
  **/
  @Schema(example = "198273645", required = true, description = "Número de referencia hecho aleatoriamente")
  public String getReferencia() {
    return referencia;
  }

  public void setReferencia(String referencia) {
    this.referencia = referencia;
  }

  public Request institucion(String institucion) {
    this.institucion = institucion;
    return this;
  }

   /**
   * Institución que envía la solicitud
   * @return institucion
  **/
  @Schema(example = "fimpe", description = "Institución que envía la solicitud")
  public String getInstitucion() {
    return institucion;
  }

  public void setInstitucion(String institucion) {
    this.institucion = institucion;
  }

  public Request fecha(String fecha) {
    this.fecha = fecha;
    return this;
  }

   /**
   * Fecha cuando se hace la solicitud
   * @return fecha
  **/
  @Schema(example = "23112020173042", description = "Fecha cuando se hace la solicitud")
  public String getFecha() {
    return fecha;
  }

  public void setFecha(String fecha) {
    this.fecha = fecha;
  }

  public Request requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The identifier of the identity data request given by the API consumer (UUID).
   * @return requestId
  **/
  @Schema(example = "391d151f-1cac-44e7-a05b-79a1199621d6", required = true, description = "The identifier of the identity data request given by the API consumer (UUID).")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.infoProvider, request.infoProvider) &&
        Objects.equals(this.nombres, request.nombres) &&
        Objects.equals(this.apellidoPaterno, request.apellidoPaterno) &&
        Objects.equals(this.apellidoMaterno, request.apellidoMaterno) &&
        Objects.equals(this.fechaNacimiento, request.fechaNacimiento) &&
        Objects.equals(this.curp, request.curp) &&
        Objects.equals(this.sexo, request.sexo) &&
        Objects.equals(this.entidadNacimiento, request.entidadNacimiento) &&
        Objects.equals(this.numeroCedula, request.numeroCedula) &&
        Objects.equals(this.cic, request.cic) &&
        Objects.equals(this.ocr, request.ocr) &&
        Objects.equals(this.claveElector, request.claveElector) &&
        Objects.equals(this.numeroEmision, request.numeroEmision) &&
        Objects.equals(this.identificadorCiudadano, request.identificadorCiudadano) &&
        Objects.equals(this.referencia, request.referencia) &&
        Objects.equals(this.institucion, request.institucion) &&
        Objects.equals(this.fecha, request.fecha) &&
        Objects.equals(this.requestId, request.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(infoProvider, nombres, apellidoPaterno, apellidoMaterno, fechaNacimiento, curp, sexo, entidadNacimiento, numeroCedula, cic, ocr, claveElector, numeroEmision, identificadorCiudadano, referencia, institucion, fecha, requestId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    
    sb.append("    infoProvider: ").append(toIndentedString(infoProvider)).append("\n");
    sb.append("    nombres: ").append(toIndentedString(nombres)).append("\n");
    sb.append("    apellidoPaterno: ").append(toIndentedString(apellidoPaterno)).append("\n");
    sb.append("    apellidoMaterno: ").append(toIndentedString(apellidoMaterno)).append("\n");
    sb.append("    fechaNacimiento: ").append(toIndentedString(fechaNacimiento)).append("\n");
    sb.append("    curp: ").append(toIndentedString(curp)).append("\n");
    sb.append("    sexo: ").append(toIndentedString(sexo)).append("\n");
    sb.append("    entidadNacimiento: ").append(toIndentedString(entidadNacimiento)).append("\n");
    sb.append("    numeroCedula: ").append(toIndentedString(numeroCedula)).append("\n");
    sb.append("    cic: ").append(toIndentedString(cic)).append("\n");
    sb.append("    ocr: ").append(toIndentedString(ocr)).append("\n");
    sb.append("    claveElector: ").append(toIndentedString(claveElector)).append("\n");
    sb.append("    numeroEmision: ").append(toIndentedString(numeroEmision)).append("\n");
    sb.append("    identificadorCiudadano: ").append(toIndentedString(identificadorCiudadano)).append("\n");
    sb.append("    referencia: ").append(toIndentedString(referencia)).append("\n");
    sb.append("    institucion: ").append(toIndentedString(institucion)).append("\n");
    sb.append("    fecha: ").append(toIndentedString(fecha)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
