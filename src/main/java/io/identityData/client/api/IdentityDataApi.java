/*
 * API Identity Data
 * <p>Identity Data API es un facilitador de funcionalidades que engloba información de distintas fuentes de acceso públicas y privadas en el progreso del producto para realizar la validación de identidad del Cliente. El objetivo es que a través de una sola API, el usuario puede acceder, corroborar y validar la identidad de la persona haciendo la solicitud de un producto o servicio.</p><br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.identityData.client.api;

import io.identityData.client.ApiClient;
import io.identityData.client.ApiException;
import io.identityData.client.ApiResponse;
import io.identityData.client.Configuration;
import io.identityData.client.Pair;
import io.identityData.client.ProgressRequestBody;
import io.identityData.client.ProgressResponseBody;
import io.identityData.client.model.Request;

import com.google.gson.reflect.TypeToken;
import io.identityData.client.model.ResponseINE;
import io.identityData.client.model.ResponseRenapo;
import io.identityData.client.model.ResponseSEP;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityDataApi {
    private ApiClient apiClient;

    public IdentityDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCredential
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCredentialCall(String xApiKey, Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/sandbox/v1/identityData/identity-data/validations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCredentialValidateBeforeCall(String xApiKey, Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling createCredential(Async)");
        }
        
        com.squareup.okhttp.Call call = createCredentialCall(xApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Call INE
     * 
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseINE> callIneWithHttpInfo(String xApiKey, Request body) throws ApiException {
        com.squareup.okhttp.Call call = createCredentialValidateBeforeCall(xApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseINE>(){}.getType();

        return apiClient.execute(call, localVarReturnType);
    }


    /**
     * Call Renapo from CURP
     *
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseRenapo> callRENAPO(String xApiKey, Request body) throws ApiException {
        com.squareup.okhttp.Call call = createCredentialValidateBeforeCall(xApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseRenapo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }


    /**
     * Call SEP
     *
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseSEP> callSEP(String xApiKey, Request body) throws ApiException {
        com.squareup.okhttp.Call call = createCredentialValidateBeforeCall(xApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseSEP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }


}
